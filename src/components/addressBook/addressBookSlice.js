import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchUsers } from "../../apis/addressBook";

const initialState = {
	usersList: [],
	pageSize: 5,
	currentPage: 1,
	fetchUsersListStatus: null
};

export const fetchUsersAsync = createAsyncThunk(
	'addressBook/fetchUsers',
	async (pageNumber = initialState.currentPage) => {
		const { data } = await fetchUsers(pageNumber, initialState.pageSize);

		return data;
	}
);

export const addressBookSlice = createSlice({
	name: 'addressBook',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		setAddressBook: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			state.value += 1;
		},
		decrement: (state) => {
			state.value -= 1;
		},
		// Use the PayloadAction type to declare the contents of `action.payload`
		incrementByAmount: (state, action) => {
			state.value += action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchUsersAsync.fulfilled, (state, action) => {
				state.fetchUsersListStatus = 200;
				state.usersList = action?.payload?.results;
				state.currentPage = action?.payload?.info?.page;
			});
	},
});

export const selectAddress = (state) => state.addressBook;

export default addressBookSlice.reducer;
